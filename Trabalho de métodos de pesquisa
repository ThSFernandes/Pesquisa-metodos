Pesquisa de métodos 
Tema: Fundamentos da Programação Orientada a Objetos e nossa experiência no seu aprendizado
Pesquisa sendo feita

Artigos para usar de base: 
-> https://d1wqtxts1xzle7.cloudfront.net/35846155/1415858715_POO-with-cover-page-v2.pdf?Expires=1667008071&Signature=a~pu52g9zmmv0rdDiqEfEPNUdxDYDQG0NL5Wb3tttZ7MHbJNuES0WjgTbluSSPuMowzvxpPfBWc2Zkv7am9TJB8bPy9yGmUprgs0DupD1Tw1zz~qSFihidekQj8Pd8TKkr8m5sGbb4Sd~baomDzglz6ybrYI9XegWHM3p0wf~cSBGHXdLmdm73WbPwn0J61TZ5aMz3sqTTnfZ-rI85m8Gn8TLjiIaF2K5GMUnpV7UcZQVst~lGWApvKJBGd1JVvm3l1wJ7RQKFahXCplHopUEqwYBJHgccISHqJh~EMQzBZJwoF0sxJZSI40rmw7KcFtyGLLa~1bGVUcSlSChc9Jbg__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA
-> https://seer.ufrgs.br/index.php/renote/article/view/61433/36325
-> http://www.lcad.icmc.usp.br/~jbatista/sce537/mat/Inicio.pdf
-> https://sol.sbc.org.br/index.php/wei/article/view/10248/10120
-> https://repositorio.pucsp.br/jspui/bitstream/handle/26820/1/Rafael%20Troquete.pdf

Explicar os quatro fundametos da POO antes e depois falar como a gente aprendeu ele na prática


1º passo:
    • Tema: Análise de estratégias para melhorar o aprendizado da programação orientada a objetos com java  
    • Problema de pesquisa: Como melhorar o aprendizado da POO?
    • Objetivo Geral:  Aprimorar o conhecimento da orientação a objeto
    
    
2º passo:

Título do trabalho: Aplicação dos fundamentos da programação orientada a objetos.

Link: 
• Conceitos básicos de POO: https://www.academia.edu/9646123/CONCEITOS_B%C3%81SICOS_DE_PROGRAMA%C3%87%C3%83O_ORIENTADA_A_OBJETOS?bulkDownload=thisPaper-topRelated-sameAuthor-citingThis-citedByThis-secondOrderCitations&from=cover_page
• Abordagem POO com java: https://www.dca.fee.unicamp.br/cursos/PooJava/Aulas/poojava.pdf
• Abordagem colaborativa para aprender POO: https://sol.sbc.org.br/index.php/sbsc/article/view/9510/9408
• POOkemon: um jogo sobre POO: https://www.sbgames.org/sbgames2018/files/papers/EducacaoShort/188359.pdf
• Objetos de aprendizagem para auxiliar o ensino de conceitos da POO: https://www.seer.ufrgs.br/index.php/renote/article/view/61433/36325
• Paradigmas de Programação: https://fit.faccat.br/~guto/artigos/Artigo_Paradigmas_de_Programacao.pdf
• POO: Uma visão conceitual dos elementos de modelagem: https://repositorio.pucsp.br/jspui/bitstream/handle/26820/1/Rafael%20Troquete.pdf
• Objetos de aprendizagem (não é artigo): https://ieducacao.ceie-br.org/objetos-aprendizagem/


Objetivo: O objetivo do trabalho é aprimorar os conhecimentos dos autores da programação orientada a objetos ao compreender seus fundamentos e aplicá-los em um projeto prático.

Resumo: 
A programação estruturada é composta por três estruturas básicas: sequências, decisões e repetições, que a partir do uso de subrotinas e funções permitem a quebra dos problemas em subproblemas garantindo boa legibilidade e compreensão da estrutura para programadores que estão iniciando seu estudo na programação. Porém, uma mudança na estrutura de dados pode alterar todas as funções relacionadas, além de gerar códigos confusos na tentativa de resolver esses problemas. 
Dessa forma, a programação orientada a objetos (POO) surgiu como alternativa à programação estruturada com o intuito de aproximar as estruturas de um programa com coisas do mundo real. Esse paradigma da programação permite também a restrição ao acesso de uma variável e contribui com o reaproveitamento de código, aspectos que carecem na programação apresentada inicialmente. 
Logo, identificando a importância da POO, os autores visam em primeiro momento explicar os quatro fundamentos principais da programação (abstração, polimorfismo, herança e encapsulamento) e depois apresentar detalhes de um (ou mais) projeto(s) prático(s) realizado(s) utilizando esses conceitos.



- 4 fundamentos base - 

.Abstração
Também conhecida como Ocultamento da informação, a abstração é o princípio pelo qual cada componente deve possuir apenas o mínimo necessário para sua operação em um determinado contexto.

.Encapsulamento
O encapsulamento tem o objetivo de ocultar do usuário toda a complexidade por trás de uma tarefa.   

.Herança
Uma classe (superclasse) pode compartilhar seus atributos e métodos com outras classes (subclasses) que por sua vez possuem seus próprios atributos e métodos.  

.Polimorfismo
O polimorfismo é uma consequência da herança em que classes derivadas de uma mesma superclasse podem invocar métodos que tem a mesma assinatura, mas comportamentos distintos.

